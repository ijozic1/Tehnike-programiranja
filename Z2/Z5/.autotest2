{
    "id": 0,
    "name": "Tehnike programiranja (2020\/2021), Zada\u0107a 2, Zadatak 5",
    "languages": [
        "C++"
    ],
    "tools": {
        "compile": {
            "require": "g++",
            "features": [
                "optimize",
                "warn",
                "pedantic",
                "C++14"
            ]
        },
        "compile[debug]": {
            "require": "g++",
            "features": [
                "debug",
                "C++14",
                "asan"
            ]
        },
        "execute": {
            "require": "asan"
        },
        "debug": [],
        "profile[asan]": {
            "require": "asan",
            "fast": true,
            "input_file": "stderr.txt"
        }
    },
    "tests": [
        {
            "id": 1,
            "name": "Test 1",
            "options": [
                "silent",
                "terminate"
            ],
            "patch": [
                {
                    "position": "main",
                    "code": "    try {\n        std::list<long int> a{ 200, -23, 100, 22 };\n        std::vector<short> b{ -1, 12, 2, -33 };\n        auto c = KreirajTablicuSabiranja(a.begin(), a.end(), b.begin());\n\n     for(int i = 0; i < 4; i++) {\n     for(int j = 0; j <= i; j++) std::cout << c[i][j] << \" \";\n     std::cout << std::endl;\n   }\n   delete[] c[0]; delete[] c;\n    }\n     catch (std::logic_error err) {\n    std::cout << err.what();\n  }"
                }
            ],
            "compile": []
        },
        {
            "id": 2,
            "name": "Test 2",
            "patch": [
                {
                    "position": "main",
                    "code": "\/\/AT1 - primjer iz postavke zadatka, sva pitanja poslati na mail kerim.hodzic@etf.unsa.ba\n_main();"
                }
            ],
            "compile[debug]": [],
            "execute": {
                "environment": {
                    "stdin": "4\n5 2 8 7\n1 3 6 2"
                },
                "expect": [
                    "Duzina sekvenci: \nElementi prve sekvence: \nElementi druge sekvence: \nTablica sabiranja:\n6\n3 5\n9 11 14\n8 10 13 9"
                ]
            },
            "debug": [],
            "profile[asan]": []
        },
        {
            "id": 3,
            "name": "Test 3",
            "patch": [
                {
                    "position": "main",
                    "code": " \/\/AT2 scenario nedostatka memorije\ntry {\n   std::srand(unsigned(std::time(nullptr))); \n   std::vector<int> a(1000000);\n   std::generate(a.begin(), a.end(), std::rand);\n   \/\/ std::for_each(a.begin(), a.begin()+1000, [](int x) {std::cout<<x<<\" \";});\n    std::vector<int> b(1000000);\n   std::generate(b.begin(), b.end(), std::rand);\n   \/\/ std::for_each(b.begin(), b.begin()+1000, [](int x) {std::cout<<x<<\" \";});\n   auto c = KreirajTablicuSabiranja(a.begin(), a.end(), b.begin());\n   for(int i = 0; i < 100000; i++) {\n     for(int j = 0; j <= i; j++) std::cout << c[i][j] << \" \";\n     std::cout << std::endl;\n   } \n   delete[] c[0]; delete[] c;\n   } \n   catch (std::range_error err) {\n    std::cout << err.what();\n  }"
                },
                {
                    "position": "top_of_file",
                    "code": "#include <algorithm>\n#include <ctime>"
                }
            ],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "Nema dovoljno memorije!"
                ]
            },
            "debug": [],
            "profile[asan]": []
        },
        {
            "id": 4,
            "name": "Test 4",
            "patch": [
                {
                    "position": "main",
                    "code": "_main();"
                }
            ],
            "compile[debug]": [],
            "execute": {
                "environment": {
                    "stdin": "5\n1 2.5 2.1 0.33 100\n200 300 12.3 -55 -2.5"
                },
                "expect": [
                    "Duzina sekvenci: \nElementi prve sekvence: \nElementi druge sekvence: \nTablica sabiranja:\n201 \n202.5 302.5 \n202.1 302.1 14.4 \n200.33 300.33 12.63 -54.67 \n300 400 112.3 45 97.5 "
                ]
            },
            "debug": [],
            "profile[asan]": []
        },
        {
            "id": 5,
            "name": "Test 5",
            "patch": [
                {
                    "position": "main",
                    "code": "try {\n        std::vector<std::string> a{ \"10\", \"20\", \"30\" };\n        std::vector<std::string> b{ \"10\", \"20\", \"30\" };\n        auto c = KreirajTablicuSabiranja(a.begin(), a.end(), b.begin());\n\n     for(int i = 0; i < 3; i++) {\n     for(int j = 0; j <= i; j++) std::cout << c[i][j] << \" \";\n     std::cout << std::endl;\n   }\n   delete[] c[0]; delete[] c;\n    }\n     catch (std::logic_error err) {\n    std::cout << err.what();\n  }"
                }
            ],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "Nije ispunjena pretpostavka o komutativnosti"
                ]
            },
            "debug": [],
            "profile[asan]": []
        },
        {
            "id": 6,
            "name": "Test 6",
            "patch": [
                {
                    "position": "main",
                    "code": "  try {\n        std::vector<Cigla> a{  1,2,3};\n        std::vector<Cigla> b{ 4,5,6};\n        auto c = KreirajTablicuSabiranja(a.begin(), a.end(), b.begin());\n\n     for(int i = 0; i < 3; i++) {\n     for(int j = 0; j <= i; j++) c[i][j].Ispisi();\n     std::cout << std::endl;\n   }\n   delete[] c[0]; delete[] c;\n    }\n     catch (std::logic_error err) {\n    std::cout << err.what();\n  }"
                },
                {
                    "position": "above_main",
                    "code": "class Cigla { \n    int x;\n    public:\n    Cigla (int c){x=c;};\n    void Ispisi () {std::cout<<\"Ja sam Cigla.\";}\n};\nclass Lopata { \n    int x;\n    public:\n    Lopata () {x=1;};\n    void Ispisi () {std::cout<<\"Ja sam Lopata.\";}};\n\nLopata operator+(Cigla a, Cigla b) { return Lopata(); }\nbool operator!=(Lopata a, Lopata b) { return 0; }\n"
                }
            ],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "Ja sam Lopata.\nJa sam Lopata.Ja sam Lopata.\nJa sam Lopata.Ja sam Lopata.Ja sam Lopata."
                ]
            },
            "debug": [],
            "profile[asan]": []
        },
        {
            "id": 7,
            "name": "Test 7",
            "patch": [
                {
                    "position": "main",
                    "code": "    try {\n        std::vector<int> a{ 123, -23, 99 };\n        std::deque<float> b{ -1.5, 12, 1.77 };\n        auto c = KreirajTablicuSabiranja(a.begin(), a.end(), b.begin());\n\n     for(int i = 0; i < 3; i++) {\n     for(int j = 0; j <= i; j++) std::cout << c[i][j] << \" \";\n     std::cout << std::endl;\n   }\n   delete[] c[0]; delete[] c;\n    }\n     catch (std::logic_error err) {\n    std::cout << err.what();\n  }"
                }
            ],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "121.5 \n-24.5 -11 \n97.5 111 100.77"
                ]
            },
            "debug": [],
            "profile[asan]": []
        },
        {
            "id": 8,
            "name": "Test 8",
            "patch": [
                {
                    "position": "main",
                    "code": "    try {\n        std::list<double> a{ 123.1, -23, 99.87, 55.5 };\n        std::deque<float> b{ -1.5, 12, -1.7, -33 };\n        auto c = KreirajTablicuSabiranja(a.begin(), a.end(), b.begin());\n\n     for(int i = 0; i < 4; i++) {\n     for(int j = 0; j <= i; j++) std::cout << c[i][j] << \" \";\n     std::cout << std::endl;\n   }\n   delete[] c[0]; delete[] c;\n    }\n     catch (std::logic_error err) {\n    std::cout << err.what();\n  }"
                }
            ],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "121.6 \n-24.5 -11 \n98.37 111.87 98.17 \n54 67.5 53.8 22.5"
                ]
            },
            "debug": [],
            "profile[asan]": []
        },
        {
            "id": 9,
            "name": "Test 9",
            "patch": [
                {
                    "position": "main",
                    "code": "    try {\n        std::vector<long int> a{ 200, -23, 100, 22 };\n        std::array<short,4>b = { -1, 12, 2, -33 };\n        auto c = KreirajTablicuSabiranja(a.begin(), a.end(), b.begin());\n\n     for(int i = 0; i < 4; i++) {\n     for(int j = 0; j <= i; j++) std::cout << c[i][j] << \" \";\n     std::cout << std::endl;\n   }\n   delete[] c[0]; delete[] c;\n    }\n     catch (std::logic_error err) {\n    std::cout << err.what();\n  }"
                }
            ],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "199 \n-24 -11 \n99 112 102 \n21 34 24 -11"
                ]
            },
            "debug": [],
            "profile[asan]": []
        },
        {
            "id": 10,
            "name": "Test 10",
            "patch": [
                {
                    "position": "main",
                    "code": "    try {\n        std::list<double> a{ 200.1, -23.2, 100.666, 22.1233456 };\n        std::array<int,4>b = { -1, 12, 2, -33 };\n        auto c = KreirajTablicuSabiranja(a.begin(), a.end(), b.begin());\n\n     for(int i = 0; i < 4; i++) {\n     for(int j = 0; j <= i; j++) std::cout << c[i][j] << \" \";\n     std::cout << std::endl;\n   }\n   delete[] c[0]; delete[] c;\n    }\n     catch (std::logic_error err) {\n    std::cout << err.what();\n  }\n"
                }
            ],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "199.1 \n-24.2 -11.2 \n99.666 112.666 102.666 \n21.1233 34.1233 24.1233 -10.8767"
                ]
            },
            "debug": [],
            "profile[asan]": []
        },
        {
            "id": 11,
            "name": "Test 11",
            "patch": [
                {
                    "position": "main",
                    "code": "     try {\n        std::deque<double> a{ 123.33333, 1368.1112345654,12.1};\n        std::array<long int,3>b = { -1, 12000,12 };\n        auto c = KreirajTablicuSabiranja(a.begin(), a.end(), b.begin());\n\n     for(int i = 0; i < 3; i++) {\n     for(int j = 0; j <= i; j++) std::cout << c[i][j] << \" \";\n     std::cout << std::endl;\n   \n   }\n     std::cout << \"New pozvan \" << brojac_new << \" puta\" << \" puta, a alocirano ukupno \" << alocirano << \" bajta.\";\n     delete[] c[0]; delete[] c;\n\n    }\n     catch (std::logic_error err) {\n    std::cout << err.what();\n  }"
                },
                {
                    "position": "above_main",
                    "code": "static size_t alocirano(0);\nstatic int brojac_new(0);\nstatic int brojac_deleteniz(0);\nstatic size_t alokacije[20];\nconst size_t RAM = 35 * sizeof(int);\n\nvoid *operator new[] (size_t vel)\n{\n    if (RAM < alocirano+vel) throw std::bad_alloc();\n    alokacije[brojac_new]=vel;    \n    brojac_new++;\n    alocirano+=vel;   \n    return std::malloc (vel);\n}\nvoid operator delete [] ( void* ptr) {\n  brojac_deleteniz++;\n  free(ptr);\n}\n"
                }
            ],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "122.333 \n1367.11 13368.1 \n11.1 12012.1 24.1 \nNew pozvan 2 puta puta, a alocirano ukupno 72 bajta."
                ]
            },
            "debug": [],
            "profile[asan]": []
        }
    ]
}