{
    "id": 0,
    "name": "Tehnike programiranja (2020\/2021), Zada\u0107a 3, Zadatak 3",
    "languages": [
        "C++"
    ],
    "tools": {
        "compile": {
            "require": "g++",
            "features": [
                "optimize",
                "warn",
                "pedantic",
                "C++14"
            ]
        },
        "compile[debug]": {
            "require": "g++",
            "features": [
                "debug",
                "C++14",
                "asan"
            ]
        },
        "execute": {
            "require": "asan"
        },
        "debug": [],
        "profile[asan]": {
            "require": "asan",
            "fast": true,
            "input_file": "stderr.txt"
        }
    },
    "tests": [
        {
            "id": 1,
            "name": "Test 1",
            "options": [
                "silent",
                "terminate"
            ],
            "patch": [
                []
            ],
            "compile": []
        },
        {
            "id": 2,
            "name": "Test 2",
            "patch": [
                {
                    "position": "main",
                    "code": "\/\/eventualne gre\u0161ke u testovima javiti na kerim.hodzic@etf.unsa.ba\nMatrica<double> a, b, c;\nint m=3, n=4;\n\ntry {\n    a = StvoriMatricu<double>(m, n);\n    MatricniHarmonijskiPolinom(a,10);\n}\ncatch(std::domain_error e) {\n    std::cout << \"IZUZETAK: \"<<e.what();\n}\nUnistiMatricu(a); UnistiMatricu(b); UnistiMatricu(c);"
                }
            ],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "IZUZETAK: Matrica nije kvadratna\t"
                ]
            },
            "debug": [],
            "profile[asan]": []
        },
        {
            "id": 3,
            "name": "Test 3",
            "patch": [
                {
                    "position": "main",
                    "code": "\t\nMatrica<double> a, b, c;\nint m=4, n=4;\n\ntry {\n    a = StvoriMatricu<double>(m, n);\n    MatricniHarmonijskiPolinom(a,-3);\n}\ncatch(std::domain_error e) {\n    std::cout << \"IZUZETAK: \"<<e.what();\n}\nUnistiMatricu(a); UnistiMatricu(b); UnistiMatricu(c);"
                }
            ],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "IZUZETAK: Pogresan parametar n\t"
                ]
            },
            "debug": [],
            "profile[asan]": []
        },
        {
            "id": 4,
            "name": "Test 4",
            "patch": [
                {
                    "position": "main",
                    "code": "_main();"
                }
            ],
            "compile[debug]": [],
            "execute": {
                "environment": {
                    "stdin": "2\n1\n2\n3\n4\n6\n"
                },
                "expect": [
                    "Unesite dimenziju kvadratne matrice: \nUnesite elemente matrice A:\nA(1,1) = \nA(1,2) = \nA(2,1) = \nA(2,2) = \nUnesite red polinoma: \nMatricni harmonijski polinom:\n1237.55 1804.1\n2706.15 3943.7"
                ]
            },
            "debug": [],
            "profile[asan]": []
        },
        {
            "id": 5,
            "name": "Test 5",
            "patch": [
                {
                    "position": "main",
                    "code": "Matrica<int> m1(StvoriMatricu<int>(3,4)), m2(StvoriMatricu<int>(4,2)), m3;\n  m1.elementi[0][0] = 2;\n  m1.elementi[0][1] = 4;\n  m1.elementi[0][2] = 3;\n  m1.elementi[0][3] = 7;\n  m1.elementi[1][0] = 1;\n  m1.elementi[1][1] = 7;\n  m1.elementi[1][2] = -3;\n  m1.elementi[1][3] = 8;\n  m1.elementi[2][0] = 9;\n  m1.elementi[2][1] = 14;\n  m1.elementi[2][2] = -13;\n  m1.elementi[2][3] = 0;\n  m2.elementi[0][0] = 78;\n  m2.elementi[0][1] = 1;\n  m2.elementi[1][0] = 35;\n  m2.elementi[1][1] = 13;\n  m2.elementi[2][0] = 0;\n  m2.elementi[2][1] = -7;\n  m2.elementi[3][0] = 4;\n  m2.elementi[3][1] = 3;\n  m3 = ProduktMatrica(m1, m2); IspisiMatricu(m3, 4);\n  UnistiMatricu(m1); UnistiMatricu(m2); UnistiMatricu(m3);"
                }
            ],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "324 54 \n355 137\n1192 282\t"
                ]
            },
            "debug": [],
            "profile[asan]": []
        },
        {
            "id": 6,
            "name": "Test 6",
            "patch": [
                {
                    "position": "main",
                    "code": " Matrica<int> m1(StvoriMatricu<int>(3,3));\n  m1.elementi[0][0] = 2;\n  m1.elementi[0][1] = 4;\n  m1.elementi[0][2] = 3;\n  m1.elementi[1][0] = 1;\n  m1.elementi[1][1] = 7;\n  m1.elementi[1][2] = -3;\n  m1.elementi[2][0] = 9;\n  m1.elementi[2][1] = 14;\n  m1.elementi[2][2] = -13;\n  IspisiMatricu(m1, 3, 0, true);"
                }
            ],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "2 4 3\n1 7 -3\n9 14-13\t"
                ]
            },
            "debug": [],
            "profile[asan]": []
        },
        {
            "id": 7,
            "name": "Test 7",
            "patch": [
                {
                    "position": "main",
                    "code": "  Matrica<int> m1(StvoriMatricu<int>(3,2)), m2(StvoriMatricu<int>(4,2)), m3;\n  try {\n    m3 = ProduktMatrica(m1, m2);\n    IspisiMatricu(m3, 4);\n  }\n  catch (std::domain_error e)\n  {\n    std::cout << \"Domain error: \" << e.what();\n  }\n  UnistiMatricu(m1); UnistiMatricu(m2);"
                }
            ],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "Domain error: Matrice nisu saglasne za mnozenje\t"
                ]
            },
            "debug": [],
            "profile[asan]": []
        },
        {
            "id": 8,
            "name": "Test 8",
            "patch": [
                {
                    "position": "main",
                    "code": "Matrica<int> m1(StvoriMatricu<int>(3,3)), m2;\n  m1.elementi[0][0] = 2;\n  m1.elementi[0][1] = 4;\n  m1.elementi[0][2] = 3;\n  m1.elementi[1][0] = 1;\n  m1.elementi[1][1] = 7;\n  m1.elementi[1][2] = -3;\n  m1.elementi[2][0] = 9;\n  m1.elementi[2][1] = 14;\n  m1.elementi[2][2] = -13;\n  m2 = ProduktMatrica(m1, m1);\n  IspisiMatricu(m2, 4);\n  UnistiMatricu(m1); UnistiMatricu(m2);"
                }
            ],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "35 78 -45\n-18 11 21\n-85 -48 154\t"
                ]
            },
            "debug": [],
            "profile[asan]": []
        },
        {
            "id": 9,
            "name": "Test 9",
            "patch": [
                {
                    "position": "main",
                    "code": "Matrica<double> m1(StvoriMatricu<double>(2,2));\n  m1.elementi[0][0] = 1;\n  m1.elementi[0][1] = 2;\n  m1.elementi[1][0] = 3;\n  m1.elementi[1][1] = 4;\n  IspisiMatricu(MatricniHarmonijskiPolinom(m1,6),9,6,true);\nUnistiMatricu(m1);"
                }
            ],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "1237.55 1804.1\n2706.15 3943.7\t"
                ]
            },
            "debug": [],
            "profile[asan]": []
        },
        {
            "id": 10,
            "name": "Test 10",
            "patch": [
                {
                    "position": "main",
                    "code": "Matrica<double> m1(StvoriMatricu<double>(2,2));\n  m1.elementi[0][0] = 1;\n  m1.elementi[0][1] = 2;\n  m1.elementi[1][0] = 3;\n  m1.elementi[1][1] = 4;\n  IspisiMatricu(MatricniHarmonijskiPolinom(m1,1),2,6,true);\nUnistiMatricu(m1);"
                }
            ],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "1 2\n3 4\t"
                ]
            },
            "debug": [],
            "profile[asan]": []
        },
        {
            "id": 11,
            "name": "Test 11",
            "patch": [
                {
                    "position": "main",
                    "code": "\/\/ Ponasanje u slucaju nedovoljne kolicine memorije\nMatrica<double> m1(StvoriMatricu<double>(2,2));\nm1.elementi[0][0] = 1;\nm1.elementi[0][1] = 2;\nm1.elementi[1][0] = 3;\nm1.elementi[1][1] = 4;\ntry {\n    IspisiMatricu(MatricniHarmonijskiPolinom(m1,6),9,6,true);\n    std::cout<<\"Ovo se ne smije ispisati\"<<std::endl;\n} catch(std::bad_alloc) {\n    std::cout << \"Nema dovoljno memorije!\\n\";\n} catch(...) {\n    std::cout << \"Ni ovo se ne smije ispisati\" << std::endl;\n}\nUnistiMatricu(m1);"
                },
                {
                    "position": "top_of_file",
                    "code": "\t\n#include <new>\n#include <cstdlib>\nconst int memorija(200);\nstatic int totalAlloc;\nvoid *operator new[] ( size_t size )\n{\n    totalAlloc += size;\n    if (totalAlloc > memorija) {\n        std::bad_alloc e;\n        throw e;\n    }\n\n    return std::malloc( size );\n}\n\nvoid operator delete[](void* pok) {\n    std::free(pok);\n}"
                }
            ],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "Nema dovoljno memorije!\t"
                ]
            },
            "debug": [],
            "profile[asan]": []
        }
    ]
}