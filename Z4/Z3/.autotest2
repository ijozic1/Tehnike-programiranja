{
    "id": 0,
    "name": "Tehnike programiranja (2020\/2021), Zada\u0107a 4, Zadatak 3",
    "languages": [
        "C++"
    ],
    "tools": {
        "compile": {
            "require": "g++",
            "features": [
                "optimize",
                "warn",
                "pedantic",
                "C++14"
            ]
        },
        "compile[debug]": {
            "require": "g++",
            "features": [
                "debug",
                "C++14",
                "asan"
            ]
        },
        "execute": {
            "require": "asan"
        },
        "debug": [],
        "profile[asan]": {
            "require": "asan",
            "fast": true,
            "input_file": "stderr.txt"
        }
    },
    "tests": [
        {
            "id": 1,
            "name": "Test 1",
            "options": [
                "silent",
                "terminate"
            ],
            "compile": []
        },
        {
            "id": 2,
            "name": "Test 2",
            "patch": [
                {
                    "position": "main",
                    "code": "\/\/AT1, eventualne probleme ili nejasno\u0107e sa testovima prijaviti na kerim.hodzic@etf.unsa.ba\n       try{\nPolazak p(\"A\",\"B\",-1,1,1,1);\n    }\n    catch (std::domain_error e)    {  \n        std::cout<<\"Broj perona mora biti u opsegu 1-15.\"<<std::endl; \n    }\n\n        try{\nPolazak p(\"A\",\"B\",16,1,1,1);\n    }\n    catch (std::domain_error e)    {  \n        std::cout<<\"Broj perona mora biti u opsegu 1-15.\"; \n    return 0;}"
                }
            ],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "Broj perona mora biti u opsegu 1-15.\nBroj perona mora biti u opsegu 1-15."
                ]
            },
            "debug": [],
            "profile[asan]": []
        },
        {
            "id": 3,
            "name": "Test 3",
            "patch": [
                {
                    "position": "main",
                    "code": "    try{\n    Polazak p(\"A\",\"B\",1,25,1,1);\n    }\n    catch (std::domain_error e)    {  \n        std::cout<<\"Izuzetak.\"<<std::endl; \n    }\n\n        try{\n    Polazak p(\"A\",\"B\",1,1,61,1);\n    }\n    catch (std::domain_error e)    {  \n        std::cout<<\"Izuzetak.\"; \n    return 0;}"
                }
            ],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "Izuzetak.\nIzuzetak."
                ]
            },
            "debug": [],
            "profile[asan]": []
        },
        {
            "id": 4,
            "name": "Test 4",
            "patch": [
                {
                    "position": "main",
                    "code": "    try{\nPolazak p(\"A\",\"B\",1,-1,1,1);\n    }\n    catch (std::domain_error e)    {  \n        std::cout<<\"Izuzetak iz konstruktora.\"<<std::endl; \n    }\n\n        try{\nPolazak p(\"A\",\"B\",1,1,1,-1);\n    }\n    catch (std::domain_error e)    {  \n        std::cout<<\"Izuzetak iz konstruktora.\"; \n    return 0;}"
                }
            ],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "Izuzetak iz konstruktora.\nIzuzetak iz konstruktora."
                ]
            },
            "debug": [],
            "profile[asan]": []
        },
        {
            "id": 5,
            "name": "Test 5",
            "patch": [
                {
                    "position": "main",
                    "code": "    try{\nPolazak p(\"A\",\"B\",1,1,1,1);\np.PostaviKasnjenje(-1);    }\n    catch (std::logic_error e)    {  \n        std::cout<<\"Neregularna vrijednost kasnjenja.\"<<std::endl; \n    }\n\n        try{\nPolasci p(1);\np.RegistrirajPolazak(\"A\",\"B\",1,1,1,1);\np.RegistrirajPolazak(\"C\",\"D\",2,2,2,2);    }\n    catch (std::range_error e)    {  \n        std::cout<<\"Dostignut maksimalni broj polazaka.\"; \n    return 0;}"
                }
            ],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "Neregularna vrijednost kasnjenja.\nDostignut maksimalni broj polazaka."
                ]
            },
            "debug": [],
            "profile[asan]": []
        },
        {
            "id": 6,
            "name": "Test 6",
            "patch": [
                {
                    "position": "main",
                    "code": "Polazak p(\"A\",\"B\",1,1,1,1);\np.PostaviKasnjenje(0);\nif (p.DaLiKasni()) std::cout<<\"DA \"; else std::cout<<\"NE \";\np.PostaviKasnjenje(1);\nif (p.DaLiKasni()) std::cout<<\"DA \"; else std::cout<<\"NE \";\np.PostaviKasnjenje(0);\nif (p.DaLiKasni()) std::cout<<\"DA\"; else std::cout<<\"NE\";"
                }
            ],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "NE DA NE"
                ]
            },
            "debug": [],
            "profile[asan]": []
        },
        {
            "id": 7,
            "name": "Test 7",
            "patch": [
                {
                    "position": "main",
                    "code": "Polazak p(\"A\",\"B\",1,1,1,60);\np.PostaviKasnjenje(2);\nint a,b,c,d;\np.OcekivanoVrijemePolaska(a,b);\np.OcekivanoVrijemeDolaska(c,d);\nstd::cout<<a<<\" \"<<b<<\" \"<<c<<\" \"<<d;"
                }
            ],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "1 3 2 3"
                ]
            },
            "debug": [],
            "profile[asan]": []
        },
        {
            "id": 8,
            "name": "Test 8",
            "patch": [
                {
                    "position": "main",
                    "code": "Polazak p(\"A\",\"B\",1,23,58,1);\np.PostaviKasnjenje(1);\nint a,b,c,d;\np.OcekivanoVrijemePolaska(a,b);\np.OcekivanoVrijemeDolaska(c,d);\nstd::cout<<a<<\" \"<<b<<\" \"<<c<<\" \"<<d;"
                }
            ],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "23 59 0 0"
                ]
            },
            "debug": [],
            "profile[asan]": []
        },
        {
            "id": 9,
            "name": "Test 9",
            "patch": [
                {
                    "position": "main",
                    "code": "Polasci p(1000);\nfor (int i(1); i<=10; i++)\n   p.RegistrirajPolazak(\"A\",\"B\",1,1,1,i);\n\nfor (int i(1); i<=10; i++) {\n   Polazak* po = new Polazak(\"C\",\"D\",1,1,1,i);\n   po->PostaviKasnjenje(1);\n   p.RegistrirajPolazak(po);\n}\nstd::cout << p.DajBrojPolazaka()<<\" \"<<p.DajBrojPolazakaKojiKasne();"
                }
            ],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "20 10"
                ]
            },
            "debug": [],
            "profile[asan]": []
        },
        {
            "id": 10,
            "name": "Test 10",
            "patch": [
                {
                    "position": "main",
                    "code": "Polasci p(1000);\nfor (int i(1); i<=10; i++)\n   p.RegistrirajPolazak(\"A\",\"B\",1,1,1,i);\n\nfor (int i(1); i<=10; i++) {\n   Polazak* po = new Polazak(\"C\",\"D\",1,1,1,i);\n   po->PostaviKasnjenje(1);\n   p.RegistrirajPolazak(po);\n}\nstd::cout << p.DajBrojPolazaka()<<\" \"<<p.DajBrojPolazakaKojiKasne();"
                }
            ],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "20 10"
                ]
            },
            "debug": [],
            "profile[asan]": []
        },
        {
            "id": 11,
            "name": "Test 11",
            "patch": [
                {
                    "position": "main",
                    "code": "Polasci p(1000);\nfor (int i(1); i<=10; i++)\n   p.RegistrirajPolazak(\"A\",\"B\",1,i,1,i);\n\nfor (int i(1); i<=10; i++) {\n   Polazak* po = new Polazak(\"C\",\"D\",1,10+i,1,i);\n   po->PostaviKasnjenje(1);\n   p.RegistrirajPolazak(po);\n}\nstd::cout << p.DajPrviPolazak().DajTrajanje() << \" \" << p.DajPosljednjiPolazak().DajTrajanje() << \" \";\np.DajPrviPolazak().PostaviKasnjenje(1);\nstd::cout << p.DajBrojPolazakaKojiKasne();"
                }
            ],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "1 10 11"
                ]
            },
            "debug": [],
            "profile[asan]": []
        },
        {
            "id": 12,
            "name": "Test 12",
            "patch": [
                {
                    "position": "main",
                    "code": "Polasci p(20);\nfor (int i(1); i<=10; i++)\n   p.RegistrirajPolazak(\"A\",\"B\",1,1,1,i);\n\nfor (int i(1); i<=10; i++) {\n   Polazak* po = new Polazak(\"C\",\"D\",1,1,1,i);\n   po->PostaviKasnjenje(1);\n   p.RegistrirajPolazak(po);\n}\n\np.IsprazniKolekciju();\nfor (int i(1); i<=10; i++)\n   p.RegistrirajPolazak(\"A\",\"B\",1,1,1,i);\nstd::cout<<p.DajBrojPolazaka();"
                }
            ],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "10"
                ]
            },
            "debug": [],
            "profile[asan]": []
        },
        {
            "id": 13,
            "name": "Test 13",
            "patch": [
                {
                    "position": "main",
                    "code": "Polasci p(1000);\nfor (int i(1); i<=10; i++)\n   p.RegistrirajPolazak(\"A\",\"B\",1,1,1,i);\n\nfor (int i(1); i<=10; i++) {\n   Polazak* po = new Polazak(\"C\",\"D\",1,1,1,i);\n   po->PostaviKasnjenje(1);\n   p.RegistrirajPolazak(po);\n}\nif (true) {\n   Polasci p2(p);\n   Polasci p3(0);\n   p3=p;\n   p2.RegistrirajPolazak(\"A\",\"B\",1,1,1,1);\n   p3.RegistrirajPolazak(\"C\",\"D\",2,2,2,2);\n   p2.RegistrirajPolazak(\"E\",\"F\",3,3,3,3);\n   std::cout<<p2.DajBrojPolazaka()<<\" \"<<p2.DajBrojPolazakaKojiKasne()<<\" \"<<p3.DajBrojPolazaka()<<\" \"<<p3.DajBrojPolazakaKojiKasne()<<\" \";\n}\nstd::cout<<p.DajBrojPolazaka()<<\" \"<<p.DajBrojPolazakaKojiKasne();"
                }
            ],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "22 10 21 10 20 10"
                ]
            },
            "debug": [],
            "profile[asan]": []
        },
        {
            "id": 14,
            "name": "Test 14",
            "patch": [
                {
                    "position": "main",
                    "code": "Polasci p(1000);\nfor (int i(1); i<=10; i++)\n   p.RegistrirajPolazak(\"A\",\"B\",1,1,1,i);\n\nfor (int i(1); i<=10; i++) {\n   Polazak* po = new Polazak(\"C\",\"D\",1,1,1,i);\n   po->PostaviKasnjenje(1);\n   p.RegistrirajPolazak(po);\n}\nPolasci pp(p);\nif (true) {\n   Polasci p2(std::move(p));\n   Polasci p3(0);\n   p3=std::move(pp);\n   p2.RegistrirajPolazak(\"A\",\"B\",1,1,1,1);\n   p3.RegistrirajPolazak(\"C\",\"D\",2,2,2,2);\n   p2.RegistrirajPolazak(\"E\",\"F\",3,3,3,3);\n   std::cout<<p2.DajBrojPolazaka()<<\" \"<<p2.DajBrojPolazakaKojiKasne()<<\" \"<<p3.DajBrojPolazaka()<<\" \"<<p3.DajBrojPolazakaKojiKasne();\n}"
                }
            ],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "22 10 21 10"
                ]
            },
            "debug": [],
            "profile[asan]": []
        },
        {
            "id": 15,
            "name": "Test 15",
            "patch": [
                {
                    "position": "main",
                    "code": "\t\nPolasci p(1000);\nfor (int i(1); i<=10; i++)\n   p.RegistrirajPolazak(\"A\",\"B\",1,1,1,i);\n\nfor (int i(1); i<=10; i++) {\n   Polazak* po = new Polazak(\"C\",\"D\",1,1,1,i);\n   po->PostaviKasnjenje(1);\n   p.RegistrirajPolazak(po);\n}\np=p; \/\/ Destruktivna samododjela!\np.RegistrirajPolazak(\"X\",\"Y\",1,1,1,1);\np=std::move(p); \/\/ Destruktivna samododjela!\np.RegistrirajPolazak(\"W\",\"Z\",1,1,1,1);\nstd::cout<<p.DajBrojPolazaka()<<\" \"<<p.DajBrojPolazakaKojiKasne();"
                }
            ],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "22 10\t"
                ]
            },
            "debug": [],
            "profile[asan]": []
        },
        {
            "id": 16,
            "name": "Test 16",
            "patch": [
                {
                    "position": "main",
                    "code": "\t\n\/\/ Test inspektora\nPolazak p1(\"A\",\"B\",1,1,1,1);\nconst Polazak& p(p1);\nstd::cout << std::boolalpha << p.DaLiKasni() << std::endl;\np.Ispisi();\np1.PostaviKasnjenje(1);\np.Ispisi();"
                }
            ],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "false\nB         A                                   1:01      1:02       1\nB         A                                   1:02 (Planirano 1:01, Kasni 1 min)"
                ]
            },
            "debug": [],
            "profile[asan]": []
        },
        {
            "id": 17,
            "name": "Test 17",
            "patch": [
                {
                    "position": "main",
                    "code": "\/\/ Test inspektora\nPolasci p(1000);\nstd::string oznaka_voznje(\"A\");\nfor (int i(1); i<=10; i++) {\n   oznaka_voznje[0]++;\n   p.RegistrirajPolazak(\"A\",oznaka_voznje,1,20-i,1,i);\n}\n\nfor (int i(1); i<=10; i++) {\n   oznaka_voznje[0]++;\n   Polazak* po = new Polazak(\"C\",oznaka_voznje,1,10-i,1,i);\n   po->PostaviKasnjenje(1);\n   p.RegistrirajPolazak(po);\n}\nconst Polasci& p2(p);\nstd::cout << p2.DajBrojPolazaka()<<\" \"<<p2.DajBrojPolazakaKojiKasne()<< std::endl;\np2.DajPrviPolazak().Ispisi();\np2.DajPosljednjiPolazak().Ispisi();"
                }
            ],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "20 10\nU         C                                   0:02 (Planirano 0:01, Kasni 1 min)\nB         A                                  19:01     19:02       1"
                ]
            },
            "debug": [],
            "profile[asan]": []
        },
        {
            "id": 18,
            "name": "Test 18",
            "patch": [
                {
                    "position": "main",
                    "code": "Polasci p(1000);\nstd::string oznaka_voznje(\"A\");\nfor (int i(1); i<=3; i++) {\n   oznaka_voznje[0]++;\n   p.RegistrirajPolazak(\"A\",oznaka_voznje,1,20-i,1,i);\n}\n\nfor (int i(1); i<=3; i++) {\n   oznaka_voznje[0]++;\n   Polazak* po = new Polazak(\"C\",oznaka_voznje,1,10-i,1,i);\n   po->PostaviKasnjenje(1);\n   p.RegistrirajPolazak(po);\n}\nconst Polasci& p2(p);\np2.Ispisi();"
                }
            ],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "    Voznja                     Odrediste   Polazak   Dolazak   Peron\n----------------------------------------------------------------------\nG         C                                   7:02 (Planirano 7:01, Kasni 1 min)\nF         C                                   8:02 (Planirano 8:01, Kasni 1 min)\nE         C                                   9:02 (Planirano 9:01, Kasni 1 min)\nD         A                                  17:01     17:04       1\nC         A                                  18:01     18:03       1\nB         A                                  19:01     19:02       1"
                ]
            },
            "debug": [],
            "profile[asan]": []
        },
        {
            "id": 19,
            "name": "Test 19",
            "patch": [
                {
                    "position": "main",
                    "code": "\/\/ Inicijalizacijska lista\nPolasci p{Polazak(\"A\",\"B\",1,1,1,2), Polazak(\"C\",\"D\",1,1,1,1), Polazak(\"E\",\"F\",1,1,1,3) };\nstd::cout << p.DajBrojPolazaka()<<\" \"<<p.DajBrojPolazakaKojiKasne();"
                }
            ],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "3 0"
                ]
            },
            "debug": [],
            "profile[asan]": []
        }
    ]
}